;;;; Misc string and vector handling for docutils
;;;; Copyright (C) 2020 Sam Kleinman <sam@tychoish.com>
;;;; Released under the GNU General Public License (GPL)
;;;; See <http://www.gnu.org/copyleft/gpl.html> for license details
;;;;

(defpackage :docutils.writer.texinfo
  (:documentation "texinfo writer for docutils")
  (:use :cl :docutils :docutils.utilities :docutils.nodes)
  (:import-from :docutils #:with-part)
  (:import-from :data-format-validation #:join-strings)
  (:shadowing-import-from :cl #:warning #:error #:inline #:special)
  (:export :texinfo-writer))
(in-package #:docutils.writer.texinfo)

(defclass texinfo-writer (writer)
  ((title
    :type string
    :initform ""
    :initarg :title
    :accessor title)
   (filename
    :type string
    :initform "output.info"
    :initarg :filename
    :accessor filename)

   ;; parts of the document in order
   head-prefix
   head

   titlepage
   contentspage
   preamble
   index
   body
   footer)
  (:default-initargs
  :parts
   '(head-prefix
     head
     titlepage
     contentspage
     preamble
     index
     body
     footer))
  (:documentation "docutils translator to texinfo"))

(defun docutils:write-texinfo (os document)
  (if (streamp os)
      (let ((writer (make-instance 'texinfo-writer)))
	(visit-node writer document)
	(write-document writer document os))
      (with-open-file (s os :direction :output :if-exists :supersede :if-does-not-exist :create)
	(docutils:write-texinfo s document))))

(docutils:register-settings-spec
 `((:encoding string "UTF-8")
   (:copying string "Generated by CL-Docutils")
   (:index string "ge")
   (:pargraph-indent integer 2)
   (:example-indent integer 4)
   (:direntry string "")
   (:preamble string "")
   (:escape-newlines boolean nil)))

(defun encode (string)
  "encode characters for info, escaping control characters and returning the encoded string"
  (with-output-to-string (os)
    (loop for c across string
	  do (case c
	       (#\@ (write-string "@@" os))
	       (#\{ (write-string "@{" os))
	       (#\} (write-string "@}" os))
	       (#\& (write-string "@ampchar{}" os))
	       (t (write-char c os))))))

(defmethod visit-node ((writer texinfo-writer) (document document))
  (with-part (head-prefix)
    (part-prepend "\\input texinfo   @c -*-texinfo-*-" #\newline
		  "@c %%**start of header" #\newline)
    (part-append (format nil "@setfilename ~A~%" (filename writer)))
    (part-append (format nil "@documentencoding ~A~%" (setting :encoding writer))))

  (with-part (head)
    (let ((copying (setting :copying writer)))
      (unless (string= "" copying)
	(part-append "@copying"
		     copying
		     "@end copying")))

    (let ((doc-title (title writer)))
      (unless (string= "" doc-title)
	(part-append (format nil "@settitle ~A~%" doc-title))))

    (let ((encoding (setting :encoding writer)))
      (unless (string= "" encoding)
	(part-append (format nil "@defindex ~A~%" encoding))))

    (part-append (format nil "@paragraphindent ~D~%" (setting :paragraph-indent writer)))
    (part-append (format nil "@exampleindent ~D~%" (setting :example-indent writer)))

    (let ((direntry (setting :direntry writer)))
      (unless (string= "" direntry)
	(part-append (format nil "%~A~%" direntry))))

    (part-append "@c %%**end of header"))

  (with-part (titlepage)
    (part-prepend "@titlepage"
		  (format nil "@title" (title writer)))
    (part-append "@end titlepage"))

  (with-part (contentspage)
    (part-append "@contents"))

  (with-part (preamble)
    (unless (string= "" preamble)
      (part-append "@c %%** start of user preamble"
		   preamble
		   "@c %%** end of user preamble")))

  (with-part (index)
    (part-prepend "@ifnottex"
		  "@node Top"
		  (format nil "@top ~A" (title writer)))
    (part-append "@end ifnottex"))

  (with-part (body)
   (call-next-method))

  (with-part (footer)
    (part-append "@bye")))

(defmethod visit-node ((writer texinfo-writer) (text text))
  (part-append (encode (as-text text))))

(defmacro def-simple-node(nodetype tagname)
  (let ((writer (gensym))
	(tagname (string-downcase tagname))
	(node (gensym)))
    `(defmethod visit-node((,writer texinfo-writer) (,node ,nodetype))
       (part-append (format nil "@~A{" ,tagname))
       (call-next-method)
       (part-append "} "))))

(def-simple-node abbreviation "abbr")
(def-simple-node acronym "acronym")

;; nodes-types (from html) ignored because they have no equivalent in
;; texinfo:
;;
;; - address

(defmethod visit-node ((writer texinfo-writer) (node admonition))
  (part-append "@cartouche" #\newline
	       (format nil "@quotation ~A~%" (translated-text (string-downcase (type-of node)) *language*)))
  (call-next-method)
  (part-append "@end quotation" #\newline
	       "@end cartouche" #\newline))

(defmethod visit-node ((writer texinfo-writer) (node attribution))
  (part-append #\newline "@flushright" #\newline)
  (call-next-method)
  (part-append #\newline "end @flushright" #\newline))

(defmethod visit-node ((writer texinfo-writer) (node author))
  (with-part (header)
    (part-append "@author")
    (call-next-method)
    (part-append #\newline)))

(def-simple-node block-quote "blockquote")

(defmethod visit-node ((writer texinfo-writer) (node bullet-list))
  (part-append #\newline #\newline "@itemize" #\newline)
  (call-next-method)
  (part-append #\newline "@end itemize" #\newline #\newline))

(defmethod visit-node ((writer texinfo-writer) (node caption))
  (if (eql figure (type-of (parent node)))
      (progn
	(part-append "@caption{")
	(call-next-method)
	(part-append "}" \#newline)))
  (warning "caption appears outside of a figure"))

(defmethod visit-node ((writer texinfo-writer) (node citation))
  (part-append #\newline #\newline "@quotation"#\newline)
  (call-next-method)
  (part-append #\newline "@end quotation" #\newline #\newline))

(defmethod visit-node ((writer texinfo-writer) (node citation-reference))
  (part-append "@w{[")
  (call-next-method)
  (part-append "]}"))

(defmethod visit-node ((writer texinfo-writer) (node classifier))
  (part-append " : ")
  (call-next-method))

(defmethod visit-node ((writer texinfo-writer) (node colspec)))
(defmethod visit-node ((writer texinfo-writer) (node comment)))
(defmethod visit-node ((writer texinfo-writer) (node compound)))
(defmethod visit-node ((writer texinfo-writer) (node contact)))
(defmethod visit-node ((writer texinfo-writer) (node copyright)))
(defmethod visit-node ((writer texinfo-writer) (node date)))
(defmethod visit-node ((writer texinfo-writer) (node definition)))
(defmethod visit-node ((writer texinfo-writer) (node definition-list)))
(defmethod visit-node ((writer texinfo-writer) (node description)))
(defmethod visit-node ((writer texinfo-writer) (node docinfo)))
(defmethod visit-node ((writer texinfo-writer) (node doctest-block)))
(defmethod visit-node ((writer texinfo-writer) (node emphasis)))
(defmethod visit-node ((writer texinfo-writer) (node entry)))
(defmethod visit-node ((writer texinfo-writer) (node enumerated-list)))
(defmethod visit-node ((writer texinfo-writer) (node field)))
(defmethod visit-node ((writer texinfo-writer) (node field-body)))
(defmethod visit-node ((writer texinfo-writer) (node field-list)))
(defmethod visit-node ((writer texinfo-writer) (node field-name)))
(defmethod visit-node ((writer texinfo-writer) (node figure)))
(defmethod visit-node ((writer texinfo-writer) (node footer)))

(defmethod visit-node ((writer texinfo-writer) (node footnote))
  (part-append #\newline #\newline "@quotation"#\newline)
  (call-next-method)
  (part-append #\newline "@end quotation" #\newline #\newline))

(defmethod visit-node ((writer texinfo-writer) (node footnote-reference))
  (part-append "@w{(")
  (call-next-method)
  (part-append ")}"))

(defmethod visit-node ((writer texinfo-writer) (node header)))
(defmethod visit-node ((writer texinfo-writer) (node math)))
(defmethod visit-node ((writer texinfo-writer) (node equation)))
(defmethod visit-node ((writer texinfo-writer) (node image)))
(defmethod visit-node ((writer texinfo-writer) (node docutils.nodes:inline)))
(defmethod visit-node ((writer texinfo-writer) (node label)))
(defmethod visit-node ((writer texinfo-writer) (node legend)))
(defmethod visit-node ((writer texinfo-writer) (node line)))
(defmethod visit-node ((writer texinfo-writer) (node line-block)))
(defmethod visit-node ((writer texinfo-writer) (node list-item)))
(defmethod visit-node ((writer texinfo-writer) (node literal)))
(defmethod visit-node ((writer texinfo-writer) (node literal-block)))
(defmethod visit-node ((writer texinfo-writer) (node docutils.nodes::meta)))
(defmethod visit-node ((writer texinfo-writer) (node option-group)))
(defmethod visit-node ((writer texinfo-writer) (node option-argument)))
(defmethod visit-node ((writer texinfo-writer) (node option-list)))
(defmethod visit-node ((writer texinfo-writer) (node option-list-item)))
(defmethod visit-node ((writer texinfo-writer) (node option-string)))
(defmethod visit-node ((writer texinfo-writer) (node organization)))
(defmethod visit-node ((writer texinfo-writer) (node paragraph)))
(defmethod visit-node ((writer texinfo-writer) (node problematic)))
(defmethod visit-node ((writer texinfo-writer) (node raw)))
(defmethod visit-node ((writer texinfo-writer) (node reference)))
(defmethod visit-node ((writer texinfo-writer) (node revision)))
(defmethod visit-node ((writer texinfo-writer) (node row)))
(defmethod visit-node ((writer texinfo-writer) (node rubric)))
(defmethod visit-node ((writer texinfo-writer) (node section)))
(defmethod visit-node ((writer texinfo-writer) (node sidebar)))
(defmethod visit-node ((writer texinfo-writer) (node status)))
(defmethod visit-node ((writer texinfo-writer) (node strong)))
(defmethod visit-node ((writer texinfo-writer) (node subscript)))
(defmethod visit-node ((writer texinfo-writer) (node substitution-definition)))
(defmethod visit-node ((writer texinfo-writer) (node subtitle)))
(defmethod visit-node ((writer texinfo-writer) (node superscript)))
(defmethod visit-node ((writer texinfo-writer) (node system-message)))
(defmethod visit-node ((writer texinfo-writer) (node table)))
(defmethod visit-node ((writer texinfo-writer) (node target)))
(defmethod visit-node ((writer texinfo-writer) (node tbody)))
(defmethod visit-node ((writer texinfo-writer) (node term)))
(defmethod visit-node ((writer texinfo-writer) (node tgroup)))
(defmethod visit-node ((writer texinfo-writer) (node thead)))
(defmethod visit-node ((writer texinfo-writer) (node title)))
(defmethod visit-node ((writer texinfo-writer) (node docutils.nodes:title-reference)))
(defmethod visit-node ((writer texinfo-writer) (node topic)))
(defmethod visit-node ((writer texinfo-writer) (node transition)))
(defmethod visit-node ((writer texinfo-writer) (node version)))
(defmethod visit-node ((writer texinfo-writer) (node docutils.nodes:evaluateable)))
